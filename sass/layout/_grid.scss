$grid-columns: 12; //standard

$grid-gaps: (
    "0":0,
    "1":1rem,
    "2":2rem,
    "3":3rem,
);


$layout-values: flex-start, flex-end, center, space-between, space-around;


@use "sass:math";


// base layout classes  -> center container 

.container {
    width: 100%;
    // max-width: 1200px;
    margin: 0 auto;

    // padding: 0 2rem;
}


.row {
    display: flex;

    flex-flow: row wrap; // if screen size get smaller it will wrap flex-items
}

// Grid gaps 

@each $key,
$val in $grid-gaps {

    // Target all descendant of col class
    .gap-#{$key} > * {
        padding: $val;
    }

    .gap-#{$key} {
        margin-left: -$val;
        margin-right: -$val;
    }
}



// justify contetn classes

@each $val in $layout-values {
    .justify-#{$val} {
        justify-content: $val;
    }
}



// column classes

//  .col-xs-12 --> col-extra small screen - give it 12 column (100%)

@include xs {
    @for $i from 1 through $grid-columns {
        .col-#{$i}-xs {
            flex-grow: 0;

            width: ($i *100%)/$grid-columns;
        }
    }
}

@include sm {
    @for $i from 1 through $grid-columns {
        .col-#{$i}-sm {
            flex-grow: 0;

            width: ($i *100%)/$grid-columns;
        }
    }
}



@include md {
    @for $i from 1 through $grid-columns {
        .col-#{$i}-md {
            flex-grow: 0;

            width: ($i *100%)/$grid-columns;
        }
    }
}


@include lg {
    @for $i from 1 through $grid-columns {
        .col-#{$i}-lg {
            flex-grow: 0;

            width: ($i *100%)/$grid-columns;
        }
    }
}


@include xl {
    @for $i from 1 through $grid-columns {
        .col-#{$i}-xl {
            flex-grow: 0;

            width: ($i *100%)/$grid-columns;
        }
    }
}